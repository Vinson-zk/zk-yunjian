<?xml version="1.0" encoding="UTF-8"?>
<beans 
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"    
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
	">
	
	<!-- 静态资源配置 如果要移入 java 中配置，可继承 DelegatingWebMvcConfiguration 后，
		在 WebMvcConfigurer 接口的方法 addResourceHandlers 中设置；
		xml 多个 location 用英文逗号分隔，如：classpath:/static/,classpath:/myPublic/ -->
	<!-- 
	<mvc:resources mapping="/static/**" location="classpath:/static/" cache-period="31556926" /> 
	<mvc:resources mapping="/eureka/**" location="classpath:/static/eureka/" />
	 -->
	 
	<!-- 一、多媒体解析器；[MultipartResolver]
		@maxUploadSize: 指定所上传文件的总大小不能超过 20 M。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和
		@maxInMemorySize: 40960
	 -->
	<!-- <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"> 
		<property name="defaultEncoding" value="UTF-8"/> 
		<property name="maxUploadSize" value="20971520"/>
		<property name="maxInMemorySize" value="40960" />
	</bean>  -->
	
	<!-- 二、地区语言解析器；[LocaleResolver 不注入，前后台分后，用公共方法统一从请求头中取；] -->
	<!-- 下面是 3 个 LocaleResolver，第一个 基于请求,这个要自己来实现，第二个 基于 session, 第三个 基于 cookie
    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver"></bean>
    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver"></bean>
    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver"></bean>
     -->
    
	<!-- 三、主题解析器；[ThemeResolver]     不配置，使用默认 -->
	
	<!-- 四、请求映射；[HandlerMapping]  国际化语言的拦截，前后台分后，用公共方法统一从请求头中取；  -->
	<!-- 
	<bean id="localeChangeInterceptor" class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" />
	<bean id="localeChangeInterceptor" class="com.zk.spring.boot.demo.mvc.interceptors.LocaleInterceptor" />
	 -->
	<!-- <bean id="localeChangeInterceptor" class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" /> -->
	<bean id="localeChangeInterceptor" class="com.zk.core.web.interceptor.ZKLocaleInterceptor" /> 
    
    <!-- 在 controller 适配器 adapter 注解方式1 或 controller 适配器 adapter 注解方式2 中，用下面的方式添加拦截器；
    如果是 controller 适配器 adapter 注解方式3，也 可以在 controller 适配器 adapter 注解中添加这个拦截：<property name="interceptors" ref="localeChangInterceptor" />
     -->
	<!-- 4.1 只注入拦截器 执行顺序根据注入的顺序决定 -->
	<!-- <mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/mvc/interceptor/i3"/>
			<bean class="com.zk.spring.boot.demo.mvc.interceptors.MyInterceptor3Example" ></bean>
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/mvc/interceptor/**"/>
			<mvc:exclude-mapping path="/mvc/interceptor/i2"/>
			<mvc:exclude-mapping path="/mvc/interceptor/i4"/>
			<bean class="com.zk.spring.boot.demo.mvc.interceptors.MyInterceptor135"></bean>
		</mvc:interceptor>
		<bean class="com.zk.spring.boot.demo.mvc.interceptors.MyInterceptorAll" ></bean>
		<mvc:interceptor>
			<mvc:mapping path="/mvc/interceptor/i2"/>
			<mvc:mapping path="/mvc/interceptor/i4"/>
			<bean class="com.zk.spring.boot.demo.mvc.interceptors.MyInterceptor24" ></bean>
		</mvc:interceptor>
	</mvc:interceptors> -->
	<!--  -->
	<mvc:interceptors>
  		<ref bean="localeChangeInterceptor"/>
  		<ref bean="zkViewVariateInterceptor"/>
  	</mvc:interceptors>
	
	<!-- 五、请求适配器；[HandlerAdapter]    在 java 配置类中配置，这里只配置一些属性； -->
	<!-- 5.1 适配消息处理 -->
	<bean id="messageConverters" class="org.springframework.boot.autoconfigure.http.HttpMessageConverters" >
		<constructor-arg>
			<array>
				<bean class="org.springframework.http.converter.StringHttpMessageConverter">
					<property name="writeAcceptCharset" value="false" /> <!-- 避免响应头过大 -->
					<property name="supportedMediaTypes">
						<list>
							<bean class="org.springframework.http.MediaType">
								<constructor-arg index="0" value="text" />
								<constructor-arg index="1" value="plain" />
								<constructor-arg index="2" value="UTF-8" />
							</bean>
							<value>*/*;charset=UTF-8</value>  
							<value>*/*</value>  
						</list>
					</property>
				</bean>
				<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
					<property name="supportedMediaTypes">
		                <list>    
		                    <value>application/json;charset=UTF-8</value>    
		                    <value>text/javascript;charset=UTF-8</value>  
		                    <value>text/html;charset=UTF-8</value>  
		                </list>    
		            </property>   
		            <property name="prettyPrint" value="false"/>  
	                <property name="objectMapper">  
	                    <bean class="com.zk.core.web.ZKJsonObjectMapper"></bean>  
	                </property>  
				</bean>
			</array>
		</constructor-arg>
	</bean> 

	<!-- 六、请求异常解析器；[HandlerExceptionResolver] 在 java mvc configuration 配置类中注入 
	<bean class="com.zk.spring.boot.demo.mvc.resolver.MyExceptionHandlerResolver" /> -->
	
	<!-- 七、请求到视图的转换；[RequestToViewNameTranslator] 不配置，使用默认 -->
	
	<!-- 八、视图解析器；[ViewResolver] 在 springboot 使用了 WebMvcAutoConfiguration 时，不能在这里配置，会冲突 -->
	<!-- jsp view 解析配置 id="JSPviewResolver" -->
	<!-- /META-INF/resources 
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
		<property name="prefix" value="/jsp/" />
		<property name="suffix" value=".jsp" />
		<property name="order" value="0" />
	</bean> -->
	<!-- 配置freeMarker视图解析器 -->
    <!-- classpath:/templates/
    <bean class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView"/>
        <property name="contentType" value="text/html;charset=UTF-8"></property>
        <property name="requestContextAttribute" value="request" />
        <property name="exposeSpringMacroHelpers" value="true" />
        <property name="exposeRequestAttributes" value="true" />
        <property name="exposeSessionAttributes" value="true" />
        <property name="cache" value="true" />
        <property name="prefix" value="" />
        <property name="suffix" value=".ftl" />
        <property name="order" value="0"/>
    </bean> 
    <bean id="fmXmlEscape" class="freemarker.template.utility.XmlEscape"/> 
    -->
	<!-- 配置freeMarker的模板路径 -->
    <!-- 注意 templateLoaderPath 不要添加classpath 
    <bean class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <property name="templateLoaderPath" value="/META-INF/resources/ftl/" />
        <property name="defaultEncoding" value="utf-8" />
        <property name="freemarkerVariables">
            <map>
                <entry key="xml_escape" value-ref="fmXmlEscape" />
            </map>
        </property>
        <property name="freemarkerSettings">
            <props>
                <prop key="template_update_delay">0</prop>
                <prop key="default_encoding">UTF-8</prop>
                <prop key="number_format">0.##########</prop>
                <prop key="date_format">yyyy-MM-dd</prop>
                <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
                <prop key="locale">zh_CN</prop>
                <prop key="classic_compatible">true</prop>
                <prop key="template_exception_handler">ignore</prop>
            </props>
        </property>
    </bean>
    -->

	<!-- 九、flash 映射管理器；[FlashMapManager] 不配置，使用默认 -->
	
	
</beans>


