<?xml version="1.0" encoding="utf-8"?>
<zkCodeTemplate>
	<content><![CDATA[
/**
 *
 * @Author: 
 * @Date: 
 * @Last 
 * @Last 
 */

import React, { Component } from 'react';
//  import { connect } from 'dva';
import { injectIntl } from 'react-intl';

import { zkTools, ZKCustomComponents, ZKOriginalComponents } from "zkFramework";        
const {
<#list zkTableInfo.cols as zkCol>
	<#if zkCol.searchStrategy == "SearchString">
ZKInput, <#break>
	</#if>
</#list>
<#list zkTableInfo.cols as zkCol>
	<#if zkCol.searchStrategy == "SearchNum" >
ZKInputNumber, <#break>
	</#if>
</#list>
<#list zkTableInfo.cols as zkCol>
	<#if zkCol.searchStrategy == "SearchSel" >
ZKSelect, <#break>
	</#if>
</#list>
} = ZKOriginalComponents;

const { 
	ZKSearchRow, 	
<#list zkTableInfo.cols as zkCol>
	<#if zkCol.searchStrategy == "SearchJson" >
ZKInputJson, <#break>
	</#if>
</#list>
<#list zkTableInfo.cols as zkCol>
	<#if zkCol.searchStrategy == "SearchDate" || zkCol.searchStrategy == "SearchDateRang" >
ZKDateFormatPicker, <#break>
	</#if>
</#list>
} = ZKCustomComponents;

const { zkToolsMsg } = zkTools;
const ZKSearchItem = ZKSearchRow.Item;

class CInit${zkTableInfo.funcName}Search extends React.Component {

    constructor(props) {
        super(props);
        this.state = {}
    }

    f_search = filter=>{
        let { dispatch, m${zkTableInfo.funcName} } = this.props;
        if(!filter){
            filter = m${zkTableInfo.funcName}.initFilter;
        }
        dispatch({ 
            type: "m${zkTableInfo.funcName}/find${zkTableInfo.funcName}s", 
            filter: {...m${zkTableInfo.funcName}.filter, ...filter}, 
            callback: e => { } 
        });
    }
    
    render(){
        let { intl, mApp, m${zkTableInfo.funcName}, locales, loading } = this.props;
        let lang = mApp.lang?mApp.lang:zkToolsMsg.getLocale();

        return (
            <ZKSearchRow 
                initialValues={m${zkTableInfo.funcName}.initFilter} 
                filter={m${zkTableInfo.funcName}.filter||m${zkTableInfo.funcName}.initFilter} 
                resetFunc={values => {}}
                searchFunc={values => {
                    this.f_search.call(this, values);
                }}
            >
                <#list zkTableInfo.cols as zkCol>
                	<#if zkCol.searchStrategy == "SearchString" >
                <ZKSearchItem name = "${zkCol.attrName?uncap_first}" label = {zkToolsMsg.msgFormatByIntl(intl, '${zkModule.modulePrefixLower}.${zkModule.moduleNameUncap}<#if zkTableInfo.subModuleName??&zkTableInfo.subModuleName != "">.${zkTableInfo.subModuleName?uncap_first}</#if>.${zkTableInfo.funcName}.${zkCol.attrName?uncap_first}')} >
                    <ZKInput style = {{width:"180px"}}  />
                </ZKSearchItem>       
    				<#elseif zkCol.searchStrategy == "SearchJson" >
                <ZKSearchItem name = "${zkCol.attrName?uncap_first}" label = {zkToolsMsg.msgFormatByIntl(intl, '${zkModule.modulePrefixLower}.${zkModule.moduleNameUncap}<#if zkTableInfo.subModuleName??&zkTableInfo.subModuleName != "">.${zkTableInfo.subModuleName?uncap_first}</#if>.${zkTableInfo.funcName}.${zkCol.attrName?uncap_first}')} >
                    <ZKInputJson style = {{width:"280px"}}  styleType="compact" primaryAttr={lang} attrs={locales} />
                </ZKSearchItem>       
    				<#elseif zkCol.searchStrategy == "SearchSel" >
                <ZKSearchItem name = "${zkCol.attrName?uncap_first}" label = {zkToolsMsg.msgFormatByIntl(intl, '${zkModule.modulePrefixLower}.${zkModule.moduleNameUncap}<#if zkTableInfo.subModuleName??&zkTableInfo.subModuleName != "">.${zkTableInfo.subModuleName?uncap_first}</#if>.${zkTableInfo.funcName}.${zkCol.attrName?uncap_first}')} >
                    <#if zkCol.attrType == "Boolean">
                    <ZKSelect fillValue = {zkToolsMsg.msgFormatByIntl(intl, 'global.app.info.all')} >
                        <ZKSelect.Option value={true}>{zkToolsMsg.msgFormatByIntl(intl, 'global.app.info.yes')}</ZKSelect.Option>
                        <ZKSelect.Option value={false}>{zkToolsMsg.msgFormatByIntl(intl, 'global.app.info.no')}</ZKSelect.Option>
                    </ZKSelect>
                    <#else>
                    <ZKSelect fillValue = {zkToolsMsg.msgFormatByIntl(intl, 'global.app.info.all')} >
                        <ZKSelect.Option value={1}>{zkToolsMsg.msgFormatByIntl(intl, 'global.app.info.yes')}</ZKSelect.Option>
                        <ZKSelect.Option value={0}>{zkToolsMsg.msgFormatByIntl(intl, 'global.app.info.no')}</ZKSelect.Option>
                    </ZKSelect>
                    </#if>
                </ZKSearchItem>       
    				<#elseif zkCol.searchStrategy == "SearchDate" >
                <ZKSearchItem name = "${zkCol.attrName?uncap_first}" label = {zkToolsMsg.msgFormatByIntl(intl, '${zkModule.modulePrefixLower}.${zkModule.moduleNameUncap}<#if zkTableInfo.subModuleName??&zkTableInfo.subModuleName != "">.${zkTableInfo.subModuleName?uncap_first}</#if>.${zkTableInfo.funcName}.${zkCol.attrName?uncap_first}')} >
                    <ZKDateFormatPicker format='YYYY-MM-DD' />
                </ZKSearchItem>      
                	<#elseif zkCol.searchStrategy == "SearchDateRang" >
                <ZKSearchItem name = "${zkCol.attrName?uncap_first}" label = {zkToolsMsg.msgFormatByIntl(intl, '${zkModule.modulePrefixLower}.${zkModule.moduleNameUncap}<#if zkTableInfo.subModuleName??&zkTableInfo.subModuleName != "">.${zkTableInfo.subModuleName?uncap_first}</#if>.${zkTableInfo.funcName}.${zkCol.attrName?uncap_first}')} >
                    <ZKDateFormatPicker.RangePicker format="YYYY-MM-DD" />
                </ZKSearchItem>   
                	<#elseif zkCol.searchStrategy == "SearchNum" >
                <ZKSearchItem name = "${zkCol.attrName?uncap_first}" label = {zkToolsMsg.msgFormatByIntl(intl, '${zkModule.modulePrefixLower}.${zkModule.moduleNameUncap}<#if zkTableInfo.subModuleName??&zkTableInfo.subModuleName != "">.${zkTableInfo.subModuleName?uncap_first}</#if>.${zkTableInfo.funcName}.${zkCol.attrName?uncap_first}')} >
                    <ZKInputNumber />
                </ZKSearchItem>  
    				</#if>
    			</#list>
            </ZKSearchRow>
        );
    }
}

export default CInit${zkTableInfo.funcName}Search;




]]>
	</content>
</zkCodeTemplate>



