<?xml version="1.0" encoding="utf-8"?>
<zkCodeTemplateInfo>
	<name>controller</name>
	<filePath>src/main/java/${zkTableInfo.packagePrefix}/${zkTableInfo.moduleName}/controller/${zkTableInfo.subModuleName?uncap_first}</filePath>
	<fileName>${zkTableInfo.className}Controller.java</fileName>
	<content><![CDATA[
/**
 * 
 */
package ${zkTableInfo.packagePrefix}.${zkTableInfo.moduleName}.controller<#if zkTableInfo.subModuleName != "">.${zkTableInfo.subModuleName?uncap_first}</#if>;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RequestMethod;

import com.zk.core.web.ZKMsgRes;
import com.zk.core.commons.data.ZKPage;
import com.zk.base.controller.ZKBaseController;
// import com.zk.core.utils.ZKJsonUtils;
// import com.zk.core.webUtils.WebUtils;

import ${zkTableInfo.packagePrefix}.${zkTableInfo.moduleName}.entity<#if zkTableInfo.subModuleName != "">.${zkTableInfo.subModuleName?uncap_first}</#if>.${zkTableInfo.className};
import ${zkTableInfo.packagePrefix}.${zkTableInfo.moduleName}.service<#if zkTableInfo.subModuleName != "">.${zkTableInfo.subModuleName?uncap_first}</#if>.${zkTableInfo.className}Service;       

/**
 * ${zkTableInfo.className}Controller
 * @author 
 * @version 
 */
@Controller
@RequestMapping(value = "${"$"}{adminPath}${"$"}{${zkTableInfo.moduleName}.path}/${zkTableInfo.classNameValue}")
public class ${zkTableInfo.className}Controller extends ZKBaseController {

	@Autowired
	private ${zkTableInfo.className}Service ${zkTableInfo.classNameValue}Service;
	
	@RequestMapping(value="${zkTableInfo.classNameValue}", method = RequestMethod.GET)
	@ResponseBody
	public ZKMsgRes ${zkTableInfo.classNameValue}Get(${zkTableInfo.className} ${zkTableInfo.classNameValue}, HttpServletRequest hReq, HttpServletResponse hRes){
		ZKMsgRes zkMsgRes = new ZKMsgRes();
		zkMsgRes.setCode("0");
		zkMsgRes.setData(this.${zkTableInfo.classNameValue}Service.get(${zkTableInfo.classNameValue}.getPkId()));
		return zkMsgRes;
	}
	
	@RequestMapping(value="${zkTableInfo.classNameValue}", method = RequestMethod.POST)
	@ResponseBody
	public ZKMsgRes ${zkTableInfo.classNameValue}Post(${zkTableInfo.className} ${zkTableInfo.classNameValue}, HttpServletRequest hReq, HttpServletResponse hRes){
		ZKMsgRes zkMsgRes = new ZKMsgRes();
		zkMsgRes.setCode("0");
		this.${zkTableInfo.classNameValue}Service.save(${zkTableInfo.classNameValue});
		zkMsgRes.setData(${zkTableInfo.classNameValue});
		return zkMsgRes;
	}
	
	@RequestMapping(value="${zkTableInfo.classNameValue}sPage", method = RequestMethod.GET)
	@ResponseBody
	public ZKMsgRes ${zkTableInfo.classNameValue}sPageGet(${zkTableInfo.className} ${zkTableInfo.classNameValue}, HttpServletRequest hReq, HttpServletResponse hRes){
		ZKMsgRes zkMsgRes = new ZKMsgRes();
		zkMsgRes.setCode("0");
		ZKPage<${zkTableInfo.className}> resultPage = ZKPage.asPage(hReq);
		resultPage = this.${zkTableInfo.classNameValue}Service.findPage(resultPage, ${zkTableInfo.classNameValue});
		zkMsgRes.setData(resultPage);
		return zkMsgRes;
	}
	
	@RequestMapping(value="${zkTableInfo.classNameValue}s", method = RequestMethod.GET)
	@ResponseBody
	public ZKMsgRes ${zkTableInfo.classNameValue}sGet(${zkTableInfo.className} ${zkTableInfo.classNameValue}, HttpServletRequest hReq, HttpServletResponse hRes){
		ZKMsgRes zkMsgRes = new ZKMsgRes();
		zkMsgRes.setCode("0");
		zkMsgRes.setData(this.${zkTableInfo.classNameValue}Service.findList(${zkTableInfo.classNameValue}));
		return zkMsgRes;
	}
	
	@RequestMapping(value="${zkTableInfo.classNameValue}", method = RequestMethod.DELETE)
	@ResponseBody
	public ZKMsgRes ${zkTableInfo.classNameValue}Delete(${zkTableInfo.className} ${zkTableInfo.classNameValue}){
		ZKMsgRes zkMsgRes = new ZKMsgRes();
		zkMsgRes.setCode("0");
		int count = this.${zkTableInfo.classNameValue}Service.delete(${zkTableInfo.classNameValue});
		zkMsgRes.setData(Long.valueOf(count));
		return zkMsgRes;
	}

}]]>
	</content>
</zkCodeTemplateInfo>


