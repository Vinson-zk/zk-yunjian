<?xml version="1.0" encoding="utf-8"?>
<zkCodeTemplate>
  <content><![CDATA[
/**
 *
 * @Author: 
 * @Date: 
 * @Last 
 * @Last 
 */
import React, { Component } from 'react';
import { injectIntl } from 'react-intl';
import { connect } from 'dva';
import { Icon } from "antd";

import locales from "../../../locales/index";
import { zkTools, ZKCustomComponents, ZKOriginalComponents } from "zkFramework";
// ZKOriginalComponents
const { ZKSpin, ZKModal,<#compress>
<#list zkTableInfo.cols as zkCol>
	<#if zkCol.editStrategy == "EditString" || zkCol.editStrategy == "EditIcon">
ZKInput, <#break>
	</#if>
</#list>
<#list zkTableInfo.cols as zkCol>
	<#if zkCol.editStrategy == "EditInt" || zkCol.editStrategy == "EditFloat">
ZKInputNumber, <#break>
	</#if>
</#list>
<#list zkTableInfo.cols as zkCol>
	<#if zkCol.editStrategy == "EditSel" >
ZKSelect, <#break>
	</#if>
</#list>
<#list zkTableInfo.cols as zkCol>
	<#if zkCol.editStrategy == "EditRadio" >
ZKRadio, <#break>
	</#if>
</#list>
</#compress>} = ZKOriginalComponents;
// ZKCustomComponents
const { ZKDetailGrid, <#compress>
<#list zkTableInfo.cols as zkCol>
	<#if zkCol.editStrategy == "EditJson" >
ZKInputJson, <#break>
	</#if>
</#list>
<#list zkTableInfo.cols as zkCol>
	<#if zkCol.editStrategy == "EditIcon" >
ZKIcon, <#break>
	</#if>
</#list>
<#list zkTableInfo.cols as zkCol>
	<#if zkCol.editStrategy == "EditDate" >
ZKDateFormatPicker, <#break>
	</#if>
</#list>
</#compress>} = ZKCustomComponents;
// zkTools
const { zkToolsMsg, zkToolsValidates, zkToolsNavAndMenu } = zkTools;  

class CInit${zkTableInfo.funcName}Detail extends Component {

  // 1、构造函数
  constructor(props) {
    super(props);
    this.state = {};
  }

  // 2、调用render方法之前调用，无论是在初始安装还是后续更新。它应该返回一个更新状态的对象，或者返回null以不更新任何状态。
  // static getDerivedStateFromProps(props, state) {
  //   return true;
  // }

  // 3、更新时调用，此方法仅作为性能优化存在。不要依赖它来“防止”渲染
  // shouldComponentUpdate(nextProps, nextState){
  //   console.log("[^_^:20181207-1800-002] CInitE1_Detail -> shouldComponentUpdate ", 
  //     (this.props.location == nextProps.location)) 
  //   return true;
  // }

  /** 返回 JSX 元素 */
  render() {

    let { location, mApp, m${zkTableInfo.funcName}, intl, loading } = this.props;
    let { optEntity } = m${zkTableInfo.funcName};
    let lang = mApp.lang?mApp.lang:zkToolsMsg.getLocale();

    let spinning = loading.effects['m${zkTableInfo.funcName}/get${zkTableInfo.funcName}'];

    return (optEntity != undefined && m${zkTableInfo.funcName}.pathname == location.pathname) && (
      <ZKSpin spinning={spinning === true} >
        <ZKDetailGrid >
          <#assign firstCol = "" />
          <#list zkTableInfo.cols as zkCol>
              <#if zkCol.editStrategy != "noEdit" >
                  <#if firstCol == "" >
                      <#assign firstCol = zkCol />
                  <#else>
          <ZKDetailGrid.Row>
            <#-- 行的左边第一个字段 firstCol -->
            <ZKDetailGrid.ColLabel>{zkToolsMsg.msgFormatByIntl(intl, '${zkModule.modulePrefixLower}.${zkModule.moduleNameUncap}<#if zkTableInfo.subModuleName??&zkTableInfo.subModuleName != "">.${zkTableInfo.subModuleName?uncap_first}</#if>.${zkTableInfo.funcName}.${firstCol.attrName?uncap_first}')}:</ZKDetailGrid.ColLabel>
            <ZKDetailGrid.ColValue>
                      <#if zkCol.editStrategy == "EditJson">
              <ZKInputJson disabled styleType="compact" value={optEntity.${firstCol.attrName?uncap_first}?optEntity.${firstCol.attrName?uncap_first}:{}} primaryAttr={lang} attrs={locales} />
                      <#elseif firstCol.editStrategy == "EditSel" || firstCol.editStrategy == "EditRadio">
              {optEntity.${firstCol.attrName?uncap_first}==1?zkToolsMsg.msgFormatByIntl(intl, 'global.app.info.yes'):zkToolsMsg.msgFormatByIntl(intl, 'global.app.info.no')}
                      <#elseif firstCol.editStrategy == "EditIcon" >
              {optEntity.${firstCol.attrName?uncap_first}&nbsp;&nbsp;&nbsp;&nbsp;{optEntity.${firstCol.attrName?uncap_first}?<ZKIcon.Antd4Icon icon = {optEntity.${firstCol.attrName?uncap_first}} />:""}
                      <#else>
              {optEntity.${firstCol.attrName?uncap_first}}
                      </#if>
            </ZKDetailGrid.ColValue> 
            <#-- 行的左边第二个字段 zkCol -->
            <ZKDetailGrid.ColLabel>{zkToolsMsg.msgFormatByIntl(intl, '${zkModule.modulePrefixLower}.${zkModule.moduleNameUncap}<#if zkTableInfo.subModuleName??&zkTableInfo.subModuleName != "">.${zkTableInfo.subModuleName?uncap_first}</#if>.${zkTableInfo.funcName}.${zkCol.attrName?uncap_first}')}:</ZKDetailGrid.ColLabel>
            <ZKDetailGrid.ColValue>
                      <#if zkCol.editStrategy == "EditJson">
              <ZKInputJson disabled styleType="compact" value={optEntity.${zkCol.attrName?uncap_first}?optEntity.${zkCol.attrName?uncap_first}:{}} primaryAttr={lang} attrs={locales} />
                      <#elseif zkCol.editStrategy == "EditSel" || zkCol.editStrategy == "EditRadio">
              {optEntity.${zkCol.attrName?uncap_first}==1?zkToolsMsg.msgFormatByIntl(intl, 'global.app.info.yes'):zkToolsMsg.msgFormatByIntl(intl, 'global.app.info.no')}
                      <#elseif zkCol.editStrategy == "EditIcon" >
              {optEntity.${zkCol.attrName?uncap_first}&nbsp;&nbsp;&nbsp;&nbsp;{optEntity.${zkCol.attrName?uncap_first}?<ZKIcon.Antd4Icon icon = {optEntity.${zkCol.attrName?uncap_first}} />:""}
                      <#else>
              {optEntity.${zkCol.attrName?uncap_first}}
                      </#if>
            </ZKDetailGrid.ColValue>
          </ZKDetailGrid.Row>
                      <#assign firstCol="" />
                  </#if>
              </#if>
          </#list>
          <#if firstCol != "">
          <ZKDetailGrid.Row>
           	<#-- 如果余一个落单的字段，单独处理成一行 firstCol -->
            <ZKDetailGrid.ColLabel>{zkToolsMsg.msgFormatByIntl(intl, '${zkModule.modulePrefixLower}.${zkModule.moduleNameUncap}<#if zkTableInfo.subModuleName??&zkTableInfo.subModuleName != "">.${zkTableInfo.subModuleName?uncap_first}</#if>.${zkTableInfo.funcName}.${firstCol.attrName?uncap_first}')}:</ZKDetailGrid.ColLabel>
            <ZKDetailGrid.ColValue>
                      <#if firstCol.editStrategy == "EditJson">
              <ZKInputJson disabled styleType="compact" value={optEntity.${firstCol.attrName?uncap_first}?optEntity.${firstCol.attrName?uncap_first}:{}} primaryAttr={lang} attrs={locales} />
                      <#elseif firstCol.editStrategy == "EditSel" || firstCol.editStrategy == "EditRadio">
              {optEntity.${firstCol.attrName?uncap_first}==1?zkToolsMsg.msgFormatByIntl(intl, 'global.app.info.yes'):zkToolsMsg.msgFormatByIntl(intl, 'global.app.info.no')}
                      <#elseif firstCol.editStrategy == "EditIcon" >
              {optEntity.${firstCol.attrName?uncap_first}&nbsp;&nbsp;&nbsp;&nbsp;{optEntity.${firstCol.attrName?uncap_first}?<ZKIcon.Antd4Icon icon = {optEntity.${firstCol.attrName?uncap_first}} />:""}
                      <#else>
              {optEntity.${firstCol.attrName?uncap_first}}
                      </#if>
            </ZKDetailGrid.ColValue> 
          </ZKDetailGrid.Row>
              <#assign firstCol="" />
          </#if> 
<#-- 下标索引值判断，因为存在字段不需要编辑，所以下标法无法实现
          <#list zkTableInfo.cols as zkCol>
              <#if zkCol.editStrategy != "noEdit" >
                  <#if (zkCol?index)%2 == 0>
                      <#if zkCol?has_next == false>
                      </#if>
                  <#else>
                  </#if>
              </#if>
          </#list>
-->
<#-- 记录下标法 
          <#assign firstColIndex = -1 />
          <#list zkTableInfo.cols as zkCol>
              <#if zkCol.editStrategy != "noEdit" >
                  <#if firstColIndex == -1 >
                      <#assign firstColIndex = zkCol?index />
                  <#else>
              处理：${zkTableInfo.cols[firstColIndex].attrName} 和 ${zkCol.attrName}
                      <#assign firstColIndex = -1 />
                  </#if>
              </#if>
          </#list>
          <#if firstColIndex != -1>
              处理落单的字段：${zkTableInfo.cols[firstColIndex].attrName} 
              <#assign firstColIndex = -1 />
          </#if>
-->
        </ZKDetailGrid>
      </ZKSpin>
    )
  }

  // 6、创建时；安装组件（插入树中）后立即调用；此方法是设置任何订阅的好地方。如果您这样做，请不要忘记取消订阅componentWillUnmount()。
  componentDidMount() {
    let { location, dispatch, match, m${zkTableInfo.funcName} } = this.props;
    let { params } = match;
    if (m${zkTableInfo.funcName}.pathname != location.pathname) {
      // 第一次进来或地址栏改变了
      dispatch({ type: 'm${zkTableInfo.funcName}/setState', payload: { pathname: location.pathname, optEntity: undefined } });
      dispatch({ type: 'm${zkTableInfo.funcName}/get${zkTableInfo.funcName}', payload: { pkId: params.pkId }});
    }
  }

  // 6、修改时；更新发生后立即调用。初始渲染不会调用此方法。
  componentDidUpdate(prevProps, prevState, snapshot) {

  }

  // 卸载时；在卸载和销毁组件之前立即调用。在此方法中执行任何必要的清理，例如使计时器无效，取消网络请求或清除在其中创建的任何订阅
  componentWillUnmount() {
    // let { m${zkTableInfo.funcName}, dvaApp } = this.props;
    // zkToolsNavAndMenu.unRegisterModel(dvaApp, [m${zkTableInfo.funcName}]);
  }
}

export default injectIntl(connect(({ mApp, m${zkTableInfo.funcName}, loading }) => ({ mApp, m${zkTableInfo.funcName}, loading }))(CInit${zkTableInfo.funcName}Detail));


]]>
  </content>
</zkCodeTemplate>



