<?xml version="1.0" encoding="utf-8"?>
<zkCodeTemplate>
	<content><![CDATA[
/**
 *
 * @Author: 
 * @Date: 
 * @Last 
 * @Last 
 */

import React, { Component } from 'react';
import { injectIntl } from 'react-intl';
import { connect } from 'dva';
import { Icon } from "antd";

import locales from "../../../locales/index";
import { zkTools, ZKCustomComponents, ZKOriginalComponents } from "zkFramework";     
// ZKOriginalComponents
const { ZKSpin, ZKModal,<#compress>
<#list zkTableInfo.cols as zkCol>
	<#if zkCol.editStrategy == "EditString" || zkCol.editStrategy == "EditIcon">
ZKInput, <#break>
	</#if>
</#list>
<#list zkTableInfo.cols as zkCol>
	<#if zkCol.editStrategy == "EditInt" || zkCol.editStrategy == "EditFloat">
ZKInputNumber, <#break>
	</#if>
</#list>
<#list zkTableInfo.cols as zkCol>
	<#if zkCol.editStrategy == "EditSel" >
ZKSelect, <#break>
	</#if>
</#list>
<#list zkTableInfo.cols as zkCol>
	<#if zkCol.editStrategy == "EditRadio" >
ZKRadio, <#break>
	</#if>
</#list>
</#compress>} = ZKOriginalComponents;
// ZKCustomComponents
const { ZKEditForm, <#compress>
<#list zkTableInfo.cols as zkCol>
	<#if zkCol.editStrategy == "EditJson" >
ZKInputJson, <#break>
	</#if>
</#list>
<#list zkTableInfo.cols as zkCol>
	<#if zkCol.editStrategy == "EditIcon" >
ZKIcon, <#break>
	</#if>
</#list>
<#list zkTableInfo.cols as zkCol>
	<#if zkCol.editStrategy == "EditDate" >
ZKDateFormatPicker, <#break>
	</#if>
</#list>
</#compress>} = ZKCustomComponents;
// zkTools
const { zkToolsMsg, zkToolsValidates, zkToolsNavAndMenu } = zkTools;  

class CInit${zkTableInfo.funcName}Edit extends Component {

    formRef = React.createRef();

    // 1、构造函数
    constructor(props) {
        super(props);
        this.state = {
        	loading: false,
<#if zkTableInfo.getIsHasIconEdit() == true >
			selIconAttrName: "",
			icon: {
	<#list zkTableInfo.cols as zkCol>
		<#if zkCol.editStrategy == "EditIcon" >
				${zkCol.attrName?uncap_first}: undefined
		</#if>
	</#list>
			}
</#if>
        }
    };
	
	/** 保存 */
    f_save = (values, form, callbackFunc) => {
        this.props.dispatch({
            type: 'm${zkTableInfo.funcName}/edit${zkTableInfo.funcName}', 
            payload: values, 
            callback: (errors) => {
                if(!errors){
                    this.setState({loading: true});
                }
                callbackFunc(errors);
            }
        });
    };

    /** 返回 JSX 元素 */
    render() {

        let { location, mApp, dispatch, m${zkTableInfo.funcName}, intl, loading } = this.props;
        let { optEntity } = m${zkTableInfo.funcName};
        
		let lang = mApp.lang?mApp.lang:zkToolsMsg.getLocale();

<#if zkTableInfo.getIsHasIconEdit() == true >
        const f_selectIcon = (value)=>{
            let selIconAttrName = this.state.selIconAttrName;
            let setIcon = {};
            setIcon[selIconAttrName] = value;
            this.formRef.current.setFieldsValue(setIcon);
            this.setState({icon: {...this.state.icon, ...setIcon}, selIconAttrName:""});
        }
        const f_showSelIconModal = (selIconAttrName)=>{
            // form.setFieldsValue({"icon": value});
            this.setState({selIconAttrName: selIconAttrName});
        }
</#if>

        // ZKJson 自定义校验规则对象
        let f_makeObjRuls = required=>{
            let objRule = {};
            for(let index in locales){
                objRule[index] = zkToolsValidates.string(intl, 1, 80, required);
            }
            return objRule;
        }
        
        let spinning = !optEntity || this.state.loading
        	 || loading.effects['m${zkTableInfo.funcName}/edit${zkTableInfo.funcName}'] || loading.effects['m${zkTableInfo.funcName}/get${zkTableInfo.funcName}'];
        
        return (optEntity != undefined && m${zkTableInfo.funcName}.pathname == location.pathname) && (
            <ZKSpin spinning={spinning === true} >
<#if zkTableInfo.getIsHasIconEdit() == true >
                <ZKModal
                    visible = {this.state.selIconAttrName != ""}
                    onCancel  = {()=>{this.setState({selIconAttrName: ""})}}
                    title={zkToolsMsg.msgFormatByIntl(intl, 'global.opt.name._key_icon.select')}
                    // footer = {<font color="red">* {zkToolsMsg.msgFormatByIntl(intl, "global.opt.name._key_icon.select.opt")}</font>}
                    footer = { null }
                    // className=""
                    width={700}
                >
                    <ZKIcon.ZKIconPanel onSelect={f_selectIcon} />
                </ZKModal>
</#if>
                <ZKEditForm ref = {this.formRef} history={history} data={optEntity}
                    saveFunc={this.f_save}
                    resetFunc={form => { return true; }}
                >
                	<ZKEditForm.Item label = {zkToolsMsg.msgFormatByIntl(intl, '${zkModule.modulePrefixLower}.${zkModule.moduleNameUncap}<#if zkTableInfo.subModuleName??&zkTableInfo.subModuleName != "">.${zkTableInfo.subModuleName?uncap_first}</#if>.${zkTableInfo.funcName}.parentName')}  >
                        { optEntity.parent?(optEntity.parent.name?zkToolsMsg.getInternationInfo(optEntity.parent.name):optEntity.parent.pkId):zkToolsMsg.msgFormatByIntl(intl, '${zkModule.modulePrefixLower}.${zkModule.moduleNameUncap}<#if zkTableInfo.subModuleName??&zkTableInfo.subModuleName != "">.${zkTableInfo.subModuleName?uncap_first}</#if>.${zkTableInfo.funcName}._top') }
                    </ZKEditForm.Item>
<#list zkTableInfo.cols as zkCol>
	<#if zkCol.editStrategy != "noEdit" >
                	<ZKEditForm.Item name = "${zkCol.attrName?uncap_first}" label = {zkToolsMsg.msgFormatByIntl(intl, '${zkModule.modulePrefixLower}.${zkModule.moduleNameUncap}<#if zkTableInfo.subModuleName??&zkTableInfo.subModuleName != "">.${zkTableInfo.subModuleName?uncap_first}</#if>.${zkTableInfo.funcName}.${zkCol.attrName?uncap_first}')} 
                		rules = {[
		<#if zkCol.editStrategy == "EditInt">
			<#if zkCol.colIsNull == true>
							zkToolsValidates.integer(intl, ${zkCol.minValue}, ${zkCol.maxValue}), 
			<#else>
							zkToolsValidates.integer(intl, ${zkCol.minValue}, ${zkCol.maxValue}, true), 
			</#if>
		<#elseif zkCol.editStrategy == "EditFloat">
			<#if zkCol.colIsNull == true>
							zkToolsValidates.number(intl, ${zkCol.minValue}, ${zkCol.maxValue}), 
			<#else>
							zkToolsValidates.number(intl, ${zkCol.minValue}, ${zkCol.maxValue}, true), 
			</#if>
		<#elseif zkCol.editStrategy == "EditJson">
			<#if zkCol.colIsNull == true>
							zkToolsValidates.object(intl, locales, undefined, f_makeObjRuls(false)), 
			<#else>
							zkToolsValidates.object(intl, locales, undefined, f_makeObjRuls(true), true), 
			</#if>
		<#elseif zkCol.editStrategy == "EditSel" || zkCol.editStrategy == "EditRadio">
			<#if zkCol.colIsNull == true>
				<#if zkCol.attrType == "String">
							zkToolsValidates.string(intl, ${zkCol.minValue}, ${zkCol.maxValue}), 
				<#elseif zkCol.isInt() == true || zkCol.isFloat() == true >
							zkToolsValidates.integer(intl, ${zkCol.minValue}, ${zkCol.maxValue}), 
				</#if>
			<#else>
				<#if zkCol.attrType == "String">
							zkToolsValidates.string(intl, ${zkCol.minValue}, ${zkCol.maxValue}, true), 
				<#elseif zkCol.isInt() == true || zkCol.isFloat() == true >
							zkToolsValidates.integer(intl, ${zkCol.minValue}, ${zkCol.maxValue}, true), 
				<#elseif zkCol.attrType == "Boolean" >
							zkToolsValidates.boolean(intl, true), 
				<#else>
							zkToolsValidates.notNull(intl, "object"), 	
				</#if>
			</#if>
		<#elseif zkCol.editStrategy == "EditIcon">
			<#if zkCol.colIsNull == true>
							zkToolsValidates.string(intl, ${zkCol.minValue}, ${zkCol.maxValue}), 
			<#else>
							zkToolsValidates.string(intl, ${zkCol.minValue}, ${zkCol.maxValue}, true), 
			</#if>
		<#elseif zkCol.editStrategy == "EditDate">
			<#if zkCol.colIsNull != true>
							zkToolsValidates.notNull(intl, "string"), 
			</#if>
		<#else>
			<#if zkCol.colIsNull == true>
							zkToolsValidates.string(intl, ${zkCol.minValue}, ${zkCol.maxValue}), 
			<#else>
							zkToolsValidates.string(intl, ${zkCol.minValue}, ${zkCol.maxValue}, true), 
			</#if>
		</#if>
                        ]} 
					>
		<#if zkCol.editStrategy == "EditInt">
			<#if zkCol.attrIsUpdate == true >
                        <ZKInputNumber placeholder={zkToolsMsg.msgFormatByIntl(intl, '${zkModule.modulePrefixLower}.${zkModule.moduleNameUncap}<#if zkTableInfo.subModuleName??&zkTableInfo.subModuleName != "">.${zkTableInfo.subModuleName?uncap_first}</#if>.${zkTableInfo.funcName}.${zkCol.attrName?uncap_first}.placeholder')}
                        	precision={0} />
            <#else>
                        <ZKInputNumber placeholder={zkToolsMsg.msgFormatByIntl(intl, '${zkModule.modulePrefixLower}.${zkModule.moduleNameUncap}<#if zkTableInfo.subModuleName??&zkTableInfo.subModuleName != "">.${zkTableInfo.subModuleName?uncap_first}</#if>.${zkTableInfo.funcName}.${zkCol.attrName?uncap_first}.placeholder')}
                        	precision={0} disabled = {optEntity.<#if zkTableInfo.pkCol??>${zkTableInfo.pkCol.attrName?uncap_first}<#else>pkId</#if>?true:false} />
            </#if>
        <#elseif zkCol.editStrategy == "EditFloat">
			<#if zkCol.attrIsUpdate == true >
                        <ZKInputNumber placeholder={zkToolsMsg.msgFormatByIntl(intl, '${zkModule.modulePrefixLower}.${zkModule.moduleNameUncap}<#if zkTableInfo.subModuleName??&zkTableInfo.subModuleName != "">.${zkTableInfo.subModuleName?uncap_first}</#if>.${zkTableInfo.funcName}.${zkCol.attrName?uncap_first}.placeholder')}
                        	precision={2} />
            <#else>
            			<ZKInputNumber placeholder={zkToolsMsg.msgFormatByIntl(intl, '${zkModule.modulePrefixLower}.${zkModule.moduleNameUncap}<#if zkTableInfo.subModuleName??&zkTableInfo.subModuleName != "">.${zkTableInfo.subModuleName?uncap_first}</#if>.${zkTableInfo.funcName}.${zkCol.attrName?uncap_first}.placeholder')}
            				precision={2} disabled = {optEntity.<#if zkTableInfo.pkCol??>${zkTableInfo.pkCol.attrName?uncap_first}<#else>pkId</#if>?true:false} />
            </#if>
		<#elseif zkCol.editStrategy == "EditJson">
			<#if zkCol.attrIsUpdate == true >
                        <ZKInputJson placeholder={zkToolsMsg.msgFormatByIntl(intl, '${zkModule.modulePrefixLower}.${zkModule.moduleNameUncap}<#if zkTableInfo.subModuleName??&zkTableInfo.subModuleName != "">.${zkTableInfo.subModuleName?uncap_first}</#if>.${zkTableInfo.funcName}.${zkCol.attrName?uncap_first}.placeholder')}
                        	styleType="compact" primaryAttr={lang} attrs={locales} />
            <#else>
                        <ZKInputJson placeholder={zkToolsMsg.msgFormatByIntl(intl, '${zkModule.modulePrefixLower}.${zkModule.moduleNameUncap}<#if zkTableInfo.subModuleName??&zkTableInfo.subModuleName != "">.${zkTableInfo.subModuleName?uncap_first}</#if>.${zkTableInfo.funcName}.${zkCol.attrName?uncap_first}.placeholder')}
                        	styleType="compact" primaryAttr={lang} attrs={locales} disabled = {optEntity.<#if zkTableInfo.pkCol??>${zkTableInfo.pkCol.attrName?uncap_first}<#else>pkId</#if>?true:false} />
            </#if>
		<#elseif zkCol.editStrategy == "EditSel">
			<#if zkCol.attrIsUpdate == true >
                        <ZKSelect placeholder={zkToolsMsg.msgFormatByIntl(intl, '${zkModule.modulePrefixLower}.${zkModule.moduleNameUncap}<#if zkTableInfo.subModuleName??&zkTableInfo.subModuleName != "">.${zkTableInfo.subModuleName?uncap_first}</#if>.${zkTableInfo.funcName}.${zkCol.attrName?uncap_first}.placeholder')} >
            <#else>
                        <ZKSelect placeholder={zkToolsMsg.msgFormatByIntl(intl, '${zkModule.modulePrefixLower}.${zkModule.moduleNameUncap}<#if zkTableInfo.subModuleName??&zkTableInfo.subModuleName != "">.${zkTableInfo.subModuleName?uncap_first}</#if>.${zkTableInfo.funcName}.${zkCol.attrName?uncap_first}.placeholder')}
                        	disabled = {optEntity.<#if zkTableInfo.pkCol??>${zkTableInfo.pkCol.attrName?uncap_first}<#else>pkId</#if>?true:false} >
            </#if>
                            <ZKSelect.Option value={0}>{zkToolsMsg.msgFormatByIntl(intl, 'global.app.info.no')}</ZKSelect.Option>
                            <ZKSelect.Option value={1}>{zkToolsMsg.msgFormatByIntl(intl, 'global.app.info.yes')}</ZKSelect.Option>
                        </ZKSelect>
		<#elseif zkCol.editStrategy == "EditRadio">
			<#if zkCol.attrType == "Boolean">
				<#if zkCol.attrIsUpdate == true >
                         <ZKRadio.Group>
	            <#else>
                         <ZKRadio.Group disabled = {optEntity.<#if zkTableInfo.pkCol??>${zkTableInfo.pkCol.attrName?uncap_first}<#else>pkId</#if>?true:false} >
	            </#if>
                            <ZKRadio.Button value={true} >{zkToolsMsg.msgFormatByIntl(intl, 'global.app.info.yes')}</ZKRadio.Button>
                            <ZKRadio.Button value={false} >{zkToolsMsg.msgFormatByIntl(intl, 'global.app.info.no')}</ZKRadio.Button>
                        </ZKRadio.Group>
        	<#else>
        		<#if zkCol.attrIsUpdate == true >
                        <ZKRadio.Group>
	            <#else>
                        <ZKRadio.Group disabled = {optEntity.<#if zkTableInfo.pkCol??>${zkTableInfo.pkCol.attrName?uncap_first}<#else>pkId</#if>?true:false} >
	            </#if>
                            <ZKRadio.Button value={0} >{zkToolsMsg.msgFormatByIntl(intl, 'global.app.info.no')}</ZKRadio.Button>
                            <ZKRadio.Button value={1} >{zkToolsMsg.msgFormatByIntl(intl, 'global.app.info.yes')}</ZKRadio.Button>
                        </ZKRadio.Group>
        	</#if>
		<#elseif zkCol.editStrategy == "EditIcon">
			<#if zkCol.attrIsUpdate == true >
                        <ZKInput.Search enterButton addonBefore={ <ZKIcon.Antd4Icon icon={this.state.icon.${zkCol.attrName?uncap_first}?this.state.icon.${zkCol.attrName?uncap_first}:(optEntity.icon?optEntity.${zkCol.attrName?uncap_first}:"")} /> }
                            onSearch={value=>f_showSelIconModal("${zkCol.attrName?uncap_first}")} />
            <#else>
            			<ZKInput.Search disabled = {optEntity.<#if zkTableInfo.pkCol??>${zkTableInfo.pkCol.attrName?uncap_first}<#else>pkId</#if>?true:false} enterButton addonBefore={ <ZKIcon.Antd4Icon icon={this.state.icon.${zkCol.attrName?uncap_first}?this.state.icon.${zkCol.attrName?uncap_first}:(optEntity.icon?optEntity.${zkCol.attrName?uncap_first}:"")} /> }
                            onSearch={value=>f_showSelIconModal("${zkCol.attrName?uncap_first}")} />
            </#if>
		<#elseif zkCol.editStrategy == "EditDate">
			<#if zkCol.attrIsUpdate == true >
                        <ZKDateFormatPicker format='YYYY-MM-DD' />
            <#else>
                        <ZKDateFormatPicker format='YYYY-MM-DD' disabled = {optEntity.<#if zkTableInfo.pkCol??>${zkTableInfo.pkCol.attrName?uncap_first}<#else>pkId</#if>?true:false} />
            </#if>
		<#else>
			<#if zkCol.attrIsUpdate == true >
                        <ZKInput placeholder={zkToolsMsg.msgFormatByIntl(intl, '${zkModule.modulePrefixLower}.${zkModule.moduleNameUncap}<#if zkTableInfo.subModuleName??&zkTableInfo.subModuleName != "">.${zkTableInfo.subModuleName?uncap_first}</#if>.${zkTableInfo.funcName}.${zkCol.attrName?uncap_first}.placeholder')} />
            <#else>
            			<ZKInput placeholder={zkToolsMsg.msgFormatByIntl(intl, '${zkModule.modulePrefixLower}.${zkModule.moduleNameUncap}<#if zkTableInfo.subModuleName??&zkTableInfo.subModuleName != "">.${zkTableInfo.subModuleName?uncap_first}</#if>.${zkTableInfo.funcName}.${zkCol.attrName?uncap_first}.placeholder')}
            				disabled = {optEntity.<#if zkTableInfo.pkCol??>${zkTableInfo.pkCol.attrName?uncap_first}<#else>pkId</#if>?true:false} />
            </#if>
		</#if>
                	</ZKEditForm.Item>
	</#if>
</#list>
            	</ZKEditForm>
            </ZKSpin>
        )
    }

    // 6、创建时；安装组件（插入树中）后立即调用；此方法是设置任何订阅的好地方。如果您这样做，请不要忘记取消订阅componentWillUnmount()。
    componentDidMount() {
        let { location, match, dispatch, m${zkTableInfo.funcName} } = this.props;
        let { params } = match;
        if (m${zkTableInfo.funcName}.pathname != location.pathname) {
        	// 第一次进来或地址栏改变了 
            dispatch({ type: 'm${zkTableInfo.funcName}/setState', payload: { pathname: location.pathname, optEntity: undefined } });
            if("_new" == params.pkId){
                if("_top" == params.parentId){
                    // 新增根结点；不需要查父节点信息；
                    dispatch({ type: 'm${zkTableInfo.funcName}/setState', payload: { optEntity:{} } });
                }else{
                	// 新增子节点；需要查父节点信息；不管父节点存不存在，都从后台查询
                    dispatch({ type: 'm${zkTableInfo.funcName}/get${zkTableInfo.funcName}', payload: { pkId: params.parentId }, isParent:true });
                }
            }else{
                // 编辑；则根据 id 取后台数据；
                dispatch({ type: 'm${zkTableInfo.funcName}/get${zkTableInfo.funcName}', payload: { pkId: params.pkId } });
            }
        }
    }

    // 6、修改时；更新发生后立即调用。初始渲染不会调用此方法。
    componentDidUpdate(prevProps, prevState, snapshot) {

    }

    // 卸载时；在卸载和销毁组件之前立即调用。在此方法中执行任何必要的清理，例如使计时器无效，取消网络请求或清除在其中创建的任何订阅
    componentWillUnmount() {
		// let { m${zkTableInfo.funcName}, dvaApp } = this.props;
		// zkToolsNavAndMenu.unRegisterModel(dvaApp, [m${zkTableInfo.funcName}]);
    }

}

// {onValuesChange:(props, changedValues, allValues) =>{
// 	console.log("--- ", props, changedValues, allValues)
// }}

export default injectIntl(connect(({ mApp, m${zkTableInfo.funcName}, loading }) => ({ mApp, m${zkTableInfo.funcName}, loading }))(CInit${zkTableInfo.funcName}Edit));
	
    



]]>
	</content>
</zkCodeTemplate>



