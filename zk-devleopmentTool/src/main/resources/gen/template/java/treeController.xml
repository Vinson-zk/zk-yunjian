<?xml version="1.0" encoding="utf-8"?>
<zkCodeTemplate>
	<content><![CDATA[
/**
 * 
 */
package ${zkModule.packagePrefix}<#if zkTableInfo.subModuleName??&zkTableInfo.subModuleName != "">.${zkTableInfo.subModuleName?uncap_first}</#if>.controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.zk.base.controller.ZKBaseController;
import com.zk.core.commons.data.ZKPage;
import com.zk.core.web.ZKMsgRes;

import ${zkModule.packagePrefix}<#if zkTableInfo.subModuleName??&zkTableInfo.subModuleName != "">.${zkTableInfo.subModuleName?uncap_first}</#if>.entity.${zkTableInfo.className};
import ${zkModule.packagePrefix}<#if zkTableInfo.subModuleName??&zkTableInfo.subModuleName != "">.${zkTableInfo.subModuleName?uncap_first}</#if>.service.${zkTableInfo.className}Service;       

/**
 * ${zkTableInfo.className}Controller
 * @author 
 * @version 
 */
@RestController
@RequestMapping(value = "${"$"}{zk.path.admin}/${"$"}{zk.path.${zkModule.moduleNameUncap}}/${"$"}{zk.${zkModule.moduleNameUncap}.version}<#if zkTableInfo.subModuleName??&zkTableInfo.subModuleName != "">/${zkTableInfo.subModuleName?uncap_first}</#if>/${zkTableInfo.funcName?uncap_first}")
public class ${zkTableInfo.className}Controller extends ZKBaseController {

	@Autowired
	private ${zkTableInfo.className}Service ${zkTableInfo.funcName?uncap_first}Service;
	
	// 编辑
	@RequestMapping(value="${zkTableInfo.funcName?uncap_first}", method = RequestMethod.POST)
	public ZKMsgRes ${zkTableInfo.funcName?uncap_first}Post(@RequestBody ${zkTableInfo.className} ${zkTableInfo.funcName?uncap_first}){
		this.${zkTableInfo.funcName?uncap_first}Service.save(${zkTableInfo.funcName?uncap_first});
        return ZKMsgRes.asOk(${zkTableInfo.funcName?uncap_first});
	}
	
	// 查询详情
	@RequestMapping(value="${zkTableInfo.funcName?uncap_first}", method = RequestMethod.GET)
	public ZKMsgRes ${zkTableInfo.funcName?uncap_first}Get(@RequestParam("pkId") ${zkTableInfo.pkAttrType} pkId){
		${zkTableInfo.className} ${zkTableInfo.funcName?uncap_first} = this.${zkTableInfo.funcName?uncap_first}Service.getDetail(new ${zkTableInfo.className}(pkId));
        return ZKMsgRes.asOk(${zkTableInfo.funcName?uncap_first});
	}
	
	// 分页 树形查询 
	@RequestMapping(value="${zkTableInfo.funcName?uncap_first}sTree", method = RequestMethod.GET)
	public ZKMsgRes ${zkTableInfo.funcName?uncap_first}sTree(${zkTableInfo.className} ${zkTableInfo.funcName?uncap_first}, HttpServletRequest hReq, HttpServletResponse hRes){
		ZKPage<${zkTableInfo.className}> resPage = ZKPage.asPage(hReq);
        resPage = this.${zkTableInfo.funcName?uncap_first}Service.findTree(resPage, ${zkTableInfo.funcName?uncap_first});
        return ZKMsgRes.asOk(resPage);
	}
	
	// 分页 列表查询 
	@RequestMapping(value="${zkTableInfo.funcName?uncap_first}s", method = RequestMethod.GET)
	public ZKMsgRes ${zkTableInfo.funcName?uncap_first}s(${zkTableInfo.className} ${zkTableInfo.funcName?uncap_first}, HttpServletRequest hReq, HttpServletResponse hRes){
		ZKPage<${zkTableInfo.className}> resPage = ZKPage.asPage(hReq);
        resPage = this.${zkTableInfo.funcName?uncap_first}Service.findPage(resPage, ${zkTableInfo.funcName?uncap_first});
        return ZKMsgRes.asOk(resPage);
	}
	
	// 批量删除
	@RequestMapping(value="${zkTableInfo.funcName?uncap_first}", method = RequestMethod.DELETE)
	public ZKMsgRes ${zkTableInfo.funcName?uncap_first}Del(@RequestParam("pkId[]") ${zkTableInfo.pkAttrType}[] pkIds){
		int count = 0;
        if (pkIds != null && pkIds.length > 0) {
            for (${zkTableInfo.pkAttrType} pkId : pkIds) {
                count += this.${zkTableInfo.funcName?uncap_first}Service.del(new ${zkTableInfo.className}(pkId));
            }
        }
        return ZKMsgRes.asOk(count);
	}

}]]>
	</content>
</zkCodeTemplate>


