<?xml version="1.0" encoding="utf-8"?>
<zkCodeTemplate>
	<content><![CDATA[
/**
 * Copyright &copy; All rights reserved.
 */
package ${zkModule.packagePrefix}<#if zkTableInfo.subModuleName??&zkTableInfo.subModuleName != "">.${zkTableInfo.subModuleName?uncap_first}</#if>.entity;

<#list zkTableInfo.importList as i>
import ${i};
</#list>
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

<#list zkTableInfo.importAnnotationsList as i>
import ${i};
</#list>

import javax.xml.bind.annotation.XmlTransient;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.springframework.data.annotation.Transient;

import com.zk.db.annotation.ZKTable;
import com.zk.base.commons.ZKTreeSqlHelper;
import com.zk.base.entity.ZKBaseTreeEntity;
import com.zk.db.commons.ZKSqlConvertDelegating;

/**
 * ${zkTableInfo.tableComments}
 * @author 
 * @version 
 */
@ZKTable(name = "${zkTableInfo.tableName}", alias = "${zkTableInfo.funcName?uncap_first}"<#if zkTableInfo.colIsExists('c_create_date') == true >, orderBy = " c_create_date ASC "</#if>)
public class ${zkTableInfo.className} extends ZKBaseTreeEntity<${zkTableInfo.pkAttrType}, ${zkTableInfo.className}> {
	
	static ZKTreeSqlHelper sqlHelper;

	@Transient
    @XmlTransient
    @JsonIgnore
    @Override
    public ZKTreeSqlHelper getTreeSqlHelper() {
        return sqlHelper();
    }

	@Transient
    @XmlTransient
    @JsonIgnore
    public static ZKTreeSqlHelper sqlHelper() {
        if (sqlHelper == null) {
            sqlHelper = new ZKTreeSqlHelper(new ZKSqlConvertDelegating(), new ${zkTableInfo.className}());
        }
        return sqlHelper;
    }
    
	private static final long serialVersionUID = 1L;
	
	<#list zkTableInfo.cols as zkCol>
		<#-- 只生成不是基类字段的属性 -->
		<#if zkCol.attrIsBaseField ==  false >
	/**
	 * ${zkCol.colComments}
	 */
	 		<#list zkCol.fieldAnnotations as fieldAnnotation>
	${fieldAnnotation}
	 		</#list>
	${zkCol.attrType} ${zkCol.attrName};	
		</#if>
	</#list>
	
	<#-- 构造方法 -->
	public ${zkTableInfo.className}() {
		super();
	}

	public ${zkTableInfo.className}(${zkTableInfo.pkAttrType} pkId){
		super(pkId);
	}
	
	<#-- 生成get和set方法 -->
	<#list zkTableInfo.cols as zkCol>
		<#-- 只生成不是基类字段的属性 -->
		<#if zkCol.attrIsBaseField == false >
	/**
	 * ${zkCol.colComments}	
	 */	
	public ${zkCol.attrType} get${zkCol.attrName?cap_first}() {
		return ${zkCol.attrName?uncap_first};
	}
	
	/**
	 * ${zkCol.colComments}
	 */	
	public void set${zkCol.attrName?cap_first}(${zkCol.attrType} ${zkCol.attrName?uncap_first}) {
		this.${zkCol.attrName?uncap_first} = ${zkCol.attrName?uncap_first};
	}
		</#if>
	</#list>
	
	<#if zkTableInfo.pkAttrType == "String" >
	/**
	 * 根据主键类型，重写主键生成；
	 */
	@Override
	protected String genId() {
        return ZKIdUtils.genLongStringId();
    }
    <#elseif zkTableInfo.pkAttrType == "Long" >
    /**
	 * 根据主键类型，重写主键生成；
	 */
    @Override
	protected Long genId() {
        return ZKIdUtils.genLongId();
    }
    </#if>
	
}]]>
	</content>
</zkCodeTemplate>
